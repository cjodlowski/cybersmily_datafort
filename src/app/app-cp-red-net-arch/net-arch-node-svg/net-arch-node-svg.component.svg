<svg xmlns="http://www.w3.org/2000/svg" id="cs-cpred-archdiagram" [attr.width]="diagramWidth" [attr.height]="diagramHeight">
  <style>
.cs-net-tooltip, .cs-floor-details  {
  display: none;
}

.cs-net-tooltip text {
  font-size: 12px;
}

.cs-floor-circle:hover .cs-floor-details  {
  display: block;
}

.csd-net-delete:hover .cs-net-tooltip, .cs-net-add:hover .cs-net-tooltip {
  display: block;
}
.cs-floor-details text {
  font-size: 10px;
}
  </style>
  <g>
    <polygon [attr.points]="getMainPolygon()" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:3;"></polygon>
    <polygon [attr.points]="getInnerPolygon()" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></polygon>
    <!-- Top hanging lines -->
    <line *ngFor="let level of counter(node.numberOfLevels); let i = index" [attr.x1]="105 + (i * 60)" y1="7" [attr.x2]="105 + (i * 60)" y2="12" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line *ngFor="let level of counter(node.numberOfLevels); let i = index" [attr.x1]="120 + (i * 60)" y1="7" [attr.x2]="120 + (i * 60)" y2="17" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line *ngFor="let level of counter(node.numberOfLevels); let i = index" [attr.x1]="115 + (i * 60)" y1="7" [attr.x2]="115 + (i * 60)" y2="12" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line *ngFor="let level of counter(node.numberOfLevels); let i = index" [attr.x1]="110 + (i * 60)" y1="7" [attr.x2]="110 + (i * 60)" y2="20" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <circle *ngFor="let level of counter(node.numberOfLevels); let i = index" [attr.cx]="110 + (i * 60)" cy="23" r="3" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></circle>

    <!-- left side lines -->
    <line x1="7" y1="55" x2="20" y2="55" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line x1="7" y1="60" x2="25" y2="60" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line x1="7" y1="65" x2="20" y2="65" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>

    <!-- bottom lines -->
    <line *ngFor="let level of counter(node.numberOfLevels).slice(0,(node.numberOfLevels - 2)); let i = index" [attr.x1]="200 + (i * 60)" [attr.y1]="diagramHeight-10" [attr.x2]="200 + (i * 60)" [attr.y2]="diagramHeight-20" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line *ngFor="let level of counter(node.numberOfLevels).slice(0,(node.numberOfLevels - 2)); let i = index" [attr.x1]="205 + (i * 60)" [attr.y1]="diagramHeight-10" [attr.x2]="205 + (i * 60)" [attr.y2]="diagramHeight-15" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line *ngFor="let level of counter(node.numberOfLevels).slice(0,(node.numberOfLevels - 2)); let i = index" [attr.x1]="210 + (i * 60)" [attr.y1]="diagramHeight-10" [attr.x2]="210 + (i * 60)" [attr.y2]="diagramHeight-30" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line *ngFor="let level of counter(node.numberOfLevels).slice(0,(node.numberOfLevels - 2)); let i = index" [attr.x1]="215 + (i * 60)" [attr.y1]="diagramHeight-10" [attr.x2]="215 + (i * 60)" [attr.y2]="diagramHeight-20" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <circle *ngFor="let level of counter(node.numberOfLevels).slice(0,(node.numberOfLevels - 2)); let i = index" [attr.cx]="200 + (i * 60)" [attr.cy]="diagramHeight-20" r="3" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></circle>

    <line [attr.x1]="diagramWidth - 35" y1="23" [attr.x2]="diagramWidth - 35" y2="20%" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line [attr.x1]="diagramWidth - 30" y1="26" [attr.x2]="diagramWidth - 30" y2="35%" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line [attr.x1]="diagramWidth - 25" y1="29" [attr.x2]="diagramWidth - 25" y2="25%" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line [attr.x1]="diagramWidth - 20" y1="33" [attr.x2]="diagramWidth - 20" y2="30%" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <circle [attr.cx]="diagramWidth - 30" cy="35%" r="3" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></circle>

    <line [attr.x1]="diagramWidth - 8" [attr.y1]="diagramHeight-35" [attr.x2]="diagramWidth - 30" [attr.y2]="diagramHeight-35" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line [attr.x1]="diagramWidth - 8" [attr.y1]="diagramHeight-38" [attr.x2]="diagramWidth - 25" [attr.y2]="diagramHeight-38" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <line [attr.x1]="diagramWidth - 8" [attr.y1]="diagramHeight-32" [attr.x2]="diagramWidth - 20" [attr.y2]="diagramHeight-32" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <!-- LEVELS -->
    <text x="20" y="30" [attr.fill]="iconColors.foreground" style="font-weight: bold;">LEVEL</text>
    <line x1="20" y1="35" x2="65" y2="35" style="fill:{{iconColors.background}};stroke:{{iconColors.border}};stroke-width:1;"></line>
    <text *ngFor="let level of counter(node.numberOfLevels); let i = index" [attr.x]="80 + (i * 60)" [attr.y]="35" [attr.fill]="iconColors.foreground" style="font-weight: bold;">{{i + 1}}</text>

    <ng-container *ngTemplateOutlet="circle;context:{node:node, y:60, offset:0}"></ng-container>
  </g>
</svg>



<!-- circle template -->
<ng-template #circle let-y="y" let-node="node" let-offset="offset">
  <svg [attr.y]="y" [attr.x]="(node.level * 60) + 20" style="overflow: visible;" class="cs-floor-circle">
    <g>

      <!-- Detail tooltip for node-->
      <svg [attr.y]="-y + 115" [attr.x]="-(node.level * 60) + 10" width="120" height="185" style="overflow: visible;" class="hidden-print cs-floor-details">
        <g>
          <polygon points="1,1 102,1 122,21 122,182 1,182" style="fill:{{getBGColor(node)}};stroke:{{getColor(node)}};stroke-width:3"></polygon>
          <polygon points="5,5 98,5 118,25 118,178 5,178" style="fill:{{getBGColor(node)}};stroke:{{getColor(node)}};stroke-width:1"></polygon>
          <g transform='translate(-6,-8)'>
            <svg [attr.x]="55" [attr.y]='20'>
              <g>
                <path transform='scale(0.06)' [attr.fill]="getColor(node)" [attr.d]="getIcon(node.type)" class="csd-net-icon"></path>
              </g>
            </svg>
          </g>
          <text x="23" y="23" text-anchor="middle" [attr.fill]="getColor(node)" style="font-size:18px;font-weight:bold">{{node.level}}.{{node.id}}</text>
          <text x="60" y="60" text-anchor="middle" [attr.fill]="getColor(node)" style="font-size:18px">{{(node.type !== 'program')?'DV' + node.dv: ''}}</text>
          <text *ngFor="let n of splitName(node.name);let i = index" x="60" [attr.y]="80 + (i * 20)" text-anchor="middle" [attr.fill]="getColor(node)" style="font-size:20px">{{n}}</text>
          <text x="60" y="170" text-anchor="middle" [attr.fill]="getColor(node)" style="font-size:20px">{{node.cost|number}}eb</text>
        </g>
      </svg>
      <polygon points="-20,-10 -10,-20, 20,-20, 20,30, -20,30" style="fill:{{getBGColor(node)}};stroke:{{getColor(node)}};stroke-width:2"></polygon>
      <polygon points="-16,-6 -6,-16, 16,-16, 16,26, -16,26" style="fill:none;stroke:{{getColor(node)}};stroke-width:1"></polygon>
      <!-- Delete icon-->
      <svg *ngIf="node.level > 3" x="20" y="-20" style="overflow: visible;cursor:pointer;" class="hidden-print csd-net-delete" (click)="removeNode(node.id, node.level)">
        <g>
          <circle cx="0" cy="0" r="5" style="fill:{{getBGColor(node)}};stroke:{{getColor(node)}};stroke-width:2"></circle>
          <svg x="5" y="0" style="overflow: visible;" class="cs-net-tooltip">
            <g>
              <rect x="0" y="-20" rx="2" ry="2" width="40" height="20" style="fill:{{getBGColor(node)}};stroke:{{getColor(node)}};stroke-width:1"></rect>
              <text x="2" y="-6" [attr.fill]="getColor(node)">Delete</text>
            </g>
          </svg>

          <line [attr.x1]="-3" [attr.y1]="0" [attr.x2]="3" [attr.y2]="0" style="stroke:{{getColor(node)}};stroke-width:3;"></line>
        </g>
      </svg>
      <line [attr.x1]="-3" [attr.y1]="0" [attr.x2]="3" [attr.y2]="0" style="stroke: {{iconColors.foreground}};stroke-width: 2;"></line>
      <g transform='translate(-6,-8)'>
        <svg [attr.x]="0" [attr.y]='0'>
          <g>
            <path transform='scale(0.03)' [attr.fill]="getColor(node)" [attr.d]="getIcon(node.type)" class="csd-net-icon">
            </path>
          </g>
        </svg>
      </g>
      <text x="-5" y="23" [attr.fill]="getColor(node)">{{node.id}}</text>
      <!-- Create the connecting lines to the child floors-->
      <ng-container [ngSwitch]="node.branch ? (node.branch.length === 1 ? 1 : (node.branch.length > 1 ? 2 : -1)) : -1">
        <ng-container *ngSwitchCase="1">
          <line *ngIf="node.branch.length === 1" [attr.x1]="20" [attr.y1]="10" [attr.x2]="40" [attr.y2]="10" style="stroke: {{iconColors.border}};stroke-width: 2;"></line>
        </ng-container>
        <ng-container *ngSwitchCase="2">
          <line [attr.x1]="20" [attr.y1]="10" [attr.x2]="40" [attr.y2]="10" style="stroke: {{iconColors.border}};stroke-width: 2;"></line>
          <line [attr.x1]="0" [attr.y1]="30" [attr.x2]="0" [attr.y2]="getOffset(node.branch[0].numberOfBranches ) + 20" style="stroke: {{iconColors.border}};stroke-width: 2;"></line>
          <line [attr.x1]="0" [attr.y1]="getOffset(node.branch[0].numberOfBranches) + 20" [attr.x2]="40" [attr.y2]="getOffset(node.branch[0].numberOfBranches) + 20" style="stroke: {{iconColors.border}};stroke-width: 2;"></line>
        </ng-container>
        <ng-container *ngSwitchDefault></ng-container>
</ng-container>
</g>
</svg>
<!-- Add the next floor(s) to the diagram.-->
<ng-container [ngSwitch]="node.branch ? (node.branch.length === 1 ? 1 : (node.branch.length > 1 ? 2 : -1)) : -1">
          <ng-container *ngSwitchCase="1">
            <ng-container *ngTemplateOutlet="circle;context:{y:y, node:node.branch[0], offset:offset}"></ng-container>
            <!-- Add new floor icon-->
            <ng-container *ngIf="showAdd(node.level)">
              <svg [attr.x]="(node.level * 60) + 20" [attr.y]="y + 30" class="hidden-print">
                <g>
                  <line [attr.x1]="0" [attr.y1]="0" [attr.x2]="0" [attr.y2]="10" style="stroke: {{iconColors.border}};stroke-width: 2;"></line>
                </g>
              </svg>
              <ng-container *ngTemplateOutlet="addNode;context:{y:y + 40, x: (node.level * 60) + 20, node: node}"></ng-container>
            </ng-container>
          </ng-container>
          <ng-container *ngSwitchCase="2">
            <ng-container *ngTemplateOutlet="circle;context:{y:y, node:node.branch[0], offset:offset}"></ng-container>
            <ng-container *ngTemplateOutlet="circle;context:{y:(y + getOffset(node.branch[0].numberOfBranches)) + 20, node:node.branch[1], offset:60 }"></ng-container>
          </ng-container>
          <ng-container *ngSwitchDefault>
<!-- Add new floor icon-->
<ng-container *ngIf="showAdd(node.level)">
            <ng-container *ngTemplateOutlet="addNode;context:{y:y, x: (node.level * 60) + 55, node: node}"></ng-container>
            <svg [attr.x]="(node.level * 60) + 40" [attr.y]="y + 5" class="hidden-print">
              <g>
                <line [attr.x1]="0" [attr.y1]="0" [attr.x2]="10" [attr.y2]="0" style="stroke: {{iconColors.border}};stroke-width: 2;"></line>
              </g>
            </svg>
          </ng-container>
        </ng-container>
      </ng-container>
    </ng-template>
    <!-- END of Circle template -->

    <!-- AddNode template -->
    <ng-template #addNode let-x="x" let-y="y" let-node="node">
      <svg [attr.y]="y + 5" [attr.x]="x" style="overflow: visible;cursor:pointer; pointer-events: all;" class="hidden-print cs-net-add" (click)="addNewNode(node.id)">
        <g>
          <circle cx="0" cy="0" r="5" style="fill:{{iconColors.background}};stroke:none;"></circle>
          <line [attr.x1]="0" [attr.y1]="-3" [attr.x2]="0" [attr.y2]="3" style="stroke: {{iconColors.foreground}};stroke-width: 2;"></line>
          <line [attr.x1]="-3" [attr.y1]="0" [attr.x2]="3" [attr.y2]="0" style="stroke: {{iconColors.foreground}};stroke-width: 2;"></line>
          <circle cx="0" cy="0" r="5" style="fill:none;stroke:{{iconColors.foreground}};stroke-width:1;"></circle>
          <svg x="0" y="0" class="cs-net-tooltip" style="overflow: visible;">
            <g>
              <rect x="9" y="-10" rx="2" ry="2" width="30" height="20" style="fill:{{getBGColor(node)}};stroke:{{getColor(node)}};stroke-width:1"></rect>
              <text x="12" y="3" [attr.fill]="getColor(node)">Add</text>
            </g>
          </svg>
        </g>
      </svg>
    </ng-template>
    <!-- end of Add Node template -->
